/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/*
  Privacy Glasses plugin for Obsidian
  Copyright 2021 Jill Alberts
  Licensed under the MIT License (http://opensource.org/licenses/MIT)
*/
function isMarkdownFileInfoView(x) {
    const anyX = x;
    return !!Object.getOwnPropertyDescriptor(anyX, "file");
}
function isHooked(view) {
    const anyView = view;
    const ownProps = Object.getOwnPropertyNames(anyView);
    return (ownProps.contains("setState") && typeof anyView.setState === "function");
}
function hookViewStateChanged(view, onBeforeStateChange, onAfterStateChange) {
    const anyView = view;
    const original = anyView.__proto__.setState;
    function wrapper() {
        onBeforeStateChange(view);
        const r = original.apply(this, arguments);
        if (typeof r.then === "function") {
            r.then(() => {
                onAfterStateChange(view);
            });
        }
        else {
            onAfterStateChange(view);
        }
        return r;
    }
    anyView.setState = wrapper.bind(view);
    return anyView;
}
/**
 * Constants
 */
var Level;
(function (Level) {
    Level["HideAll"] = "hide-all";
    Level["HidePrivate"] = "hide-private";
    Level["RevealAll"] = "reveal-all";
    Level["RevealHeadlines"] = "reveal-headlines";
})(Level || (Level = {}));
var CssClass;
(function (CssClass) {
    CssClass["BlurAll"] = "privacy-glasses-blur-all";
    CssClass["RevealOnHover"] = "privacy-glasses-reveal-on-hover";
    CssClass["RevealAll"] = "privacy-glasses-reveal-all";
    CssClass["RevealUnderCaret"] = "privacy-glasses-reveal-under-caret";
    CssClass["RevealHeadlines"] = "privacy-glasses-reveal-headlines";
    CssClass["Reveal"] = "privacy-glasses-reveal";
    CssClass["IsMdView"] = "is-md-view";
    CssClass["IsNonMdView"] = "is-non-md-view";
    CssClass["IsMdViewHeadlinesOnly"] = "is-md-view-headlines-only";
    CssClass["PrivacyGlassesReveal"] = "privacy-glasses-reveal";
})(CssClass || (CssClass = {}));
/**
 * Main
 */
class PrivacyGlassesPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.revealed = [];
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.statusBar = this.addStatusBarItem();
            yield this.loadSettings();
            this.addSettingTab(new privacyGlassesSettingTab(this.app, this));
            obsidian.addIcon("eye", eyeIcon);
            obsidian.addIcon("eye-closed", eyeClosedIcon);
            obsidian.addIcon("eye-slash", eyeSlashIcon);
            obsidian.addIcon("eye-glasses", eyeGlasses);
            this.addRibbonIcon("eye-closed", "Hide all", () => {
                this.currentLevel = Level.HideAll;
                this.updateLeavesAndGlobalReveals();
            });
            this.addRibbonIcon("eye-slash", "Reveal non-private", () => {
                this.currentLevel = Level.HidePrivate;
                this.updateLeavesAndGlobalReveals();
            });
            this.addRibbonIcon("eye-glasses", "Reveal headlines only", () => {
                this.currentLevel = Level.RevealHeadlines;
                this.updateLeavesAndGlobalReveals();
            });
            this.addRibbonIcon("eye", "Reveal all", () => {
                this.currentLevel = Level.RevealAll;
                this.updateLeavesAndGlobalReveals();
            });
            this.addCommand({
                id: "privacy-glasses-hide-all",
                name: "Privacy Glasses - hide all",
                callback: () => {
                    this.currentLevel = Level.HideAll;
                    this.updateLeavesAndGlobalReveals();
                },
            });
            this.addCommand({
                id: "privacy-glasses-hide-private",
                name: "Privacy Glasses - hide files in folders marked as private",
                callback: () => {
                    this.currentLevel = Level.HidePrivate;
                    this.updateLeavesAndGlobalReveals();
                },
            });
            this.addCommand({
                id: "privacy-glasses-reveal-headlines",
                name: "Privacy Glasses - reveal headlines only, keeping body content hidden",
                callback: () => {
                    this.currentLevel = Level.RevealHeadlines;
                    this.updateLeavesAndGlobalReveals();
                },
            });
            this.addCommand({
                id: "privacy-glasses-reveal-all",
                name: "Privacy Glasses - do not hide anything",
                callback: () => {
                    this.currentLevel = Level.RevealAll;
                    this.updateLeavesAndGlobalReveals();
                },
            });
            this.registerInterval(window.setInterval(() => {
                this.checkIdleTimeout();
            }, 1000));
            this.app.workspace.onLayoutReady(() => {
                this.registerDomActivityEvents(this.app.workspace.rootSplit.win);
                this.currentLevel = this.settings.blurOnStartup;
                this.updateLeavesAndGlobalReveals();
                this.updatePrivateDirsEl(this.app.workspace.rootSplit.win.document);
                this.ensureLeavesHooked();
            });
            this.registerEvent(this.app.workspace.on("window-open", (win) => {
                this.registerDomActivityEvents(win.win);
            }));
            this.registerEvent(this.app.workspace.on("active-leaf-change", (e) => {
                this.ensureLeavesHooked();
                this.updateLeafViewStyle(e.view);
            }));
            this.lastEventTime = performance.now();
        });
    }
    // we hook into setState function of the view, because it is synchronously called
    // before the content switch. this is to prevent private content from being accidentally briefly revealed
    onBeforeViewStateChange(l) {
        this.revealed.forEach((r) => {
            r.removeClass(CssClass.Reveal);
        });
    }
    onAfterViewStateChange(l) {
        // some panels update using the same event, so it is important to update leaves after they are ready
        setTimeout(() => {
            this.updateLeavesStyle();
        }, 200);
        this.ensureLeavesHooked();
    }
    ensureLeavesHooked() {
        this.app.workspace.iterateAllLeaves((e) => {
            if (isHooked(e.view)) {
                return;
            }
            hookViewStateChanged(e.view, () => {
                this.onBeforeViewStateChange(e);
            }, () => {
                this.onAfterViewStateChange(e);
            });
        });
    }
    registerDomActivityEvents(win) {
        this.registerDomEvent(win, "mousedown", (e) => {
            this.lastEventTime = e.timeStamp;
        });
        this.registerDomEvent(win, "keydown", (e) => {
            this.lastEventTime = e.timeStamp;
        });
        this.addBlurLevelEl(win.document);
    }
    checkIdleTimeout() {
        if (this.settings.blurOnIdleTimeoutSeconds < 0) {
            return;
        }
        if (this.currentLevel === Level.HideAll) {
            return;
        }
        if (!this.lastEventTime) {
            return;
        }
        const now = performance.now();
        if ((now - this.lastEventTime) / 1000 >=
            this.settings.blurOnIdleTimeoutSeconds) {
            this.currentLevel = Level.HideAll;
            this.updateLeavesAndGlobalReveals();
        }
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.statusBar.remove();
            yield this.saveSettings();
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    shouldRevealLeaf(view) {
        var _a;
        if (this.currentLevel === Level.RevealAll) {
            return true;
        }
        if (this.currentLevel === Level.HideAll ||
            this.currentLevel === Level.RevealHeadlines) {
            return false;
        }
        if (!isMarkdownFileInfoView(view)) {
            return true;
        }
        if (view.editor &&
            this.settings.privateNoteMarker &&
            this.settings.privateNoteMarker !== "") {
            let tags = [];
            // Get tags in the note body, if any
            if ('tags' in this.app.metadataCache.getFileCache(view.file)) {
                tags.push(...this.app.metadataCache.getFileCache(view.file).tags.filter(x => !!x.tag).map(x => x.tag));
            }
            // Get tags in properties, if any
            let frontmatter = (_a = this.app.metadataCache.getFileCache(view.file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
            // console.log(frontmatter)
            if (frontmatter && 'tags' in frontmatter) { // here
                tags.push(...this.app.metadataCache.getFileCache(view.file).frontmatter.tags.filter((x) => !!x));
            }
            if (tags && tags.length > 0) {
                return !tags.includes(this.settings.privateNoteMarker);
            }
        }
        if (view.file &&
            !this.settings.privateDirs.contains(view.file.parent.path)) {
            return true;
        }
        return false;
    }
    updateLeafViewStyle(view) {
        const isMd = isMarkdownFileInfoView(view) && view.editor;
        view.containerEl.removeClass(CssClass.IsMdView, CssClass.IsNonMdView, CssClass.IsMdViewHeadlinesOnly);
        if (isMd && this.currentLevel === Level.RevealHeadlines) {
            view.containerEl.addClass(CssClass.IsMdViewHeadlinesOnly);
        }
        else if (isMd) {
            view.containerEl.addClass(CssClass.IsMdView);
        }
        else {
            view.containerEl.addClass(CssClass.IsNonMdView);
        }
        const shouldReveal = this.shouldRevealLeaf(view);
        if (shouldReveal) {
            view.containerEl.addClass(CssClass.PrivacyGlassesReveal);
            this.revealed.push(view.containerEl);
        }
        else {
            view.containerEl.removeClass(CssClass.PrivacyGlassesReveal);
        }
    }
    updateLeavesAndGlobalReveals() {
        this.updateLeavesStyle();
        this.updateGlobalRevealStyle();
    }
    updateLeavesStyle() {
        this.app.workspace.iterateAllLeaves((e) => {
            this.updateLeafViewStyle(e.view);
        });
    }
    updateGlobalRevealStyle() {
        this.removeAllClasses();
        this.setClassToDocumentBody(this.currentLevel);
        if (this.settings.hoverToReveal) {
            document.body.classList.add(CssClass.RevealOnHover);
        }
        if (this.settings.revealUnderCaret) {
            document.body.classList.add(CssClass.RevealUnderCaret);
        }
    }
    removeAllClasses() {
        document.body.removeClass(CssClass.BlurAll, CssClass.RevealOnHover, CssClass.RevealAll, CssClass.RevealUnderCaret, CssClass.RevealHeadlines);
    }
    setClassToDocumentBody(currentLevel) {
        switch (currentLevel) {
            case Level.HideAll:
                document.body.classList.add(CssClass.BlurAll);
                break;
            case Level.RevealAll:
                document.body.classList.add(CssClass.RevealAll);
                break;
            case Level.RevealHeadlines:
                document.body.classList.add(CssClass.RevealHeadlines);
                break;
        }
    }
    addBlurLevelEl(doc) {
        this.blurLevelStyleEl = doc.createElement("style");
        this.blurLevelStyleEl.id = "privacyGlassesBlurLevel";
        doc.head.appendChild(this.blurLevelStyleEl);
        this.updateBlurLevelEl();
    }
    updateBlurLevelEl() {
        if (!this.blurLevelStyleEl) {
            return;
        }
        this.blurLevelStyleEl.textContent = `body {--blurLevel:${this.settings.blurLevel}em};`;
    }
    updatePrivateDirsEl(doc) {
        if (doc && !this.privateDirsStyleEl) {
            this.privateDirsStyleEl = doc.createElement("style");
            this.privateDirsStyleEl.id = "privacyGlassesDirBlur";
            doc.head.appendChild(this.privateDirsStyleEl);
        }
        const dirs = this.settings.privateDirs.split(",");
        this.privateDirsStyleEl.textContent = dirs
            .map((d) => `

          :is(.nav-folder-title, .nav-file-title)[data-path^=${d}] {filter: blur(calc(var(--blurLevel) * 1))}

          :is(.nav-folder-title, .nav-file-title)[data-path^=${d}]:hover {filter: unset}

          .privacy-glasses-reveal-all :is(.nav-folder-title, .nav-file-title)[data-path^=${d}] {filter: unset}


          `)
            .join("");
    }
}
const DEFAULT_SETTINGS = {
    blurOnStartup: Level.HidePrivate,
    blurLevel: 0.3,
    blurOnIdleTimeoutSeconds: -1,
    hoverToReveal: true,
    revealUnderCaret: false,
    privateDirs: "",
    privateNoteMarker: "#private",
};
class privacyGlassesSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h3", {
            text: "Privacy Glasses v" + this.plugin.manifest.version,
        });
        containerEl.createEl("a", {
            text: "https://github.com/jillalberts/privacy-glasses",
            href: "https://github.com/jillalberts/privacy-glasses",
        });
        containerEl.createEl("span", {
            text: ": documentation, report issues, contact info",
        });
        containerEl.createEl("p", {
            text: 'To activate/deactivate Privacy Glasses, click the glasses icon on the left-hand ribbon or run "Privacy Glasses" commands in the Command Palette (Ctrl-P). The command can also be bound to a keyboard shortcut if you wish.',
        });
        new obsidian.Setting(containerEl)
            .setName("Activate Privacy Glasses on startup")
            .setDesc("Indicates whether the plugin is automatically activated when starting Obsidian.")
            .addDropdown((toggle) => {
            toggle.addOptions({
                "hide-all": "Hide all",
                "hide-private": "Hide private (default)",
                "reveal-all": "Reveal all",
                "reveal-headlines": "Reveal headlines only"
            });
            toggle.setValue(this.plugin.settings.blurOnStartup);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.blurOnStartup = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Hide all after user inactivity (seconds)")
            .setDesc("Inactivity time after which Privacy Glasses will hide all. -1 to disable auto-hiding.")
            .addText((textfield) => {
            textfield.setPlaceholder("-1");
            textfield.inputEl.type = "number";
            textfield.inputEl.min = "-1";
            textfield.setValue(String(this.plugin.settings.blurOnIdleTimeoutSeconds));
            textfield.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let parsed = parseFloat(value);
                if (isNaN(parsed)) {
                    parsed = -1;
                }
                this.plugin.settings.blurOnIdleTimeoutSeconds = parsed;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Hover to reveal")
            .setDesc("Indicates whether or not to reveal content when hovering the cursor over it.")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.hoverToReveal);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.hoverToReveal = value;
                this.plugin.updateLeavesAndGlobalReveals();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Reveal under caret")
            .setDesc("Indicates whether or not to reveal content when caret is on it.")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.revealUnderCaret);
            toggle.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.revealUnderCaret = value;
                this.plugin.updateGlobalRevealStyle();
                yield this.plugin.saveSettings();
            }));
        });
        var sliderEl = new obsidian.Setting(containerEl);
        let sliderElDesc = "Higher is blurrier. Default=60, current=";
        sliderEl
            .setName("Blur level")
            .setDesc(sliderElDesc + Math.round(this.plugin.settings.blurLevel * 100))
            // ^ need rounding to not show values like '55.00000000000001'
            .addSlider((slider) => slider
            .setLimits(0.1, 1.5, 0.05)
            .setValue(this.plugin.settings.blurLevel)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.blurLevel = value;
            sliderEl.setDesc(sliderElDesc + Math.round(this.plugin.settings.blurLevel * 100));
            this.plugin.updateBlurLevelEl();
            this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Private directories")
            .setDesc("Comma-separated list of directories, in which files are considered private")
            .addText((text) => text
            .setPlaceholder("finance,therapy")
            .setValue(this.plugin.settings.privateDirs)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.privateDirs = value;
            yield this.plugin.saveSettings();
            this.plugin.updateLeavesAndGlobalReveals();
            this.plugin.updatePrivateDirsEl();
        })));
        new obsidian.Setting(containerEl)
            .setName("Private note marker")
            .setDesc("Start a note with this text to mark note as private")
            .addText((text) => text
            .setPlaceholder("#private")
            .setValue(this.plugin.settings.privateNoteMarker)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.privateNoteMarker = value;
            yield this.plugin.saveSettings();
            this.plugin.updateLeavesStyle();
        })));
    }
}
// https://icon-sets.iconify.design/ph/eye-slash/
const eyeSlashIcon = `<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="currentColor" d="M53.9 34.6a8 8 0 0 0-11.8 10.8l19.2 21.1C25 88.8 9.4 123.2 8.7 124.8a8.2 8.2 0 0 0 0 6.5c.3.7 8.8 19.5 27.6 38.4c25.1 25 56.8 38.3 91.7 38.3a128.6 128.6 0 0 0 52.1-10.8l22 24.2a8 8 0 0 0 5.9 2.6a8.2 8.2 0 0 0 5.4-2.1a7.9 7.9 0 0 0 .5-11.3Zm47.3 75.9l41.7 45.8A31.6 31.6 0 0 1 128 160a32 32 0 0 1-26.8-49.5ZM128 192c-30.8 0-57.7-11.2-79.9-33.3A128.3 128.3 0 0 1 25 128c4.7-8.8 19.8-33.5 47.3-49.4l18 19.8a48 48 0 0 0 63.6 70l14.7 16.2A112.1 112.1 0 0 1 128 192Zm119.3-60.7c-.4.9-10.5 23.3-33.4 43.8a8.1 8.1 0 0 1-5.3 2a7.6 7.6 0 0 1-5.9-2.7a8 8 0 0 1 .6-11.3A131 131 0 0 0 231 128a130.3 130.3 0 0 0-23.1-30.8C185.7 75.2 158.8 64 128 64a112.9 112.9 0 0 0-19.4 1.6a8.1 8.1 0 0 1-9.2-6.6a8 8 0 0 1 6.6-9.2a132.4 132.4 0 0 1 22-1.8c34.9 0 66.6 13.3 91.7 38.3c18.8 18.9 27.3 37.7 27.6 38.5a8.2 8.2 0 0 1 0 6.5ZM134 96.6a8 8 0 0 1 3-15.8a48.3 48.3 0 0 1 38.8 42.7a8 8 0 0 1-7.2 8.7h-.8a7.9 7.9 0 0 1-7.9-7.2A32.2 32.2 0 0 0 134 96.6Z"/></svg>`;
// https://icon-sets.iconify.design/ph/eye-closed-bold/
const eyeClosedIcon = `<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="currentColor" d="M234.4 160.8a12 12 0 0 1-10.4 18a11.8 11.8 0 0 1-10.4-6l-16.3-28.2a126 126 0 0 1-29.4 13.5l5.2 29.4a11.9 11.9 0 0 1-9.7 13.9l-2.1.2a12 12 0 0 1-11.8-9.9l-5.1-28.7a123.5 123.5 0 0 1-16.4 1a146.3 146.3 0 0 1-16.5-1l-5.1 28.7a12 12 0 0 1-11.8 9.9l-2.1-.2a11.9 11.9 0 0 1-9.7-13.9l5.2-29.4a125.3 125.3 0 0 1-29.3-13.5L42.3 173a12.1 12.1 0 0 1-10.4 6a11.7 11.7 0 0 1-6-1.6a12 12 0 0 1-4.4-16.4l17.9-31a142.4 142.4 0 0 1-16.7-17.6a12 12 0 1 1 18.6-15.1C57.1 116.8 84.9 140 128 140s70.9-23.2 86.7-42.7a12 12 0 1 1 18.6 15.1a150.3 150.3 0 0 1-16.7 17.7Z"/></svg>`;
// https://icon-sets.iconify.design/ph/eye/
const eyeIcon = `<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="currentColor" d="M247.3 124.8c-.3-.8-8.8-19.6-27.6-38.5C194.6 61.3 162.9 48 128 48S61.4 61.3 36.3 86.3C17.5 105.2 9 124 8.7 124.8a7.9 7.9 0 0 0 0 6.4c.3.8 8.8 19.6 27.6 38.5c25.1 25 56.8 38.3 91.7 38.3s66.6-13.3 91.7-38.3c18.8-18.9 27.3-37.7 27.6-38.5a7.9 7.9 0 0 0 0-6.4ZM128 192c-30.8 0-57.7-11.2-79.9-33.3A130.3 130.3 0 0 1 25 128a130.3 130.3 0 0 1 23.1-30.8C70.3 75.2 97.2 64 128 64s57.7 11.2 79.9 33.2A130.3 130.3 0 0 1 231 128c-7.2 13.5-38.6 64-103 64Zm0-112a48 48 0 1 0 48 48a48 48 0 0 0-48-48Zm0 80a32 32 0 1 1 32-32a32.1 32.1 0 0 1-32 32Z"/></svg>`;
// https://icon-sets.iconify.design/ph/eyeglasses/
const eyeGlasses = `<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="currentColor" d="M200 40a8 8 0 0 0 0 16a16 16 0 0 1 16 16v58.08A44 44 0 0 0 145.68 152h-35.36A44 44 0 0 0 40 130.08V72a16 16 0 0 1 16-16a8 8 0 0 0 0-16a32 32 0 0 0-32 32v92a44 44 0 0 0 87.81 4h32.38a44 44 0 0 0 87.81-4V72a32 32 0 0 0-32-32ZM68 192a28 28 0 1 1 28-28a28 28 0 0 1-28 28Zm120 0a28 28 0 1 1 28-28a28 28 0 0 1-28 28Z"/></svg>`;

module.exports = PrivacyGlassesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCwgSXRlcmF0b3IgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xyXG4gICAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XHJcbiAgICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xyXG4gICAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XHJcbiAgICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcclxuICAgIHZhciBfLCBkb25lID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XHJcbiAgICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xyXG4gICAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gICAgZG9uZSA9IHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xyXG4gICAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XHJcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xyXG4gICAgcmV0dXJuIGcubmV4dCA9IHZlcmIoMCksIGdbXCJ0aHJvd1wiXSA9IHZlcmIoMSksIGdbXCJyZXR1cm5cIl0gPSB2ZXJiKDIpLCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAoZ1tuXSkgeyBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyBpZiAoZikgaVtuXSA9IGYoaVtuXSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xyXG4gICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIGFyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgayBpbiBvKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspKSBhclthci5sZW5ndGhdID0gaztcclxuICAgICAgICByZXR1cm4gYXI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG93bktleXMobyk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xyXG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcclxuICAgICAgICB2YXIgZGlzcG9zZSwgaW5uZXI7XHJcbiAgICAgICAgaWYgKGFzeW5jKSB7XHJcbiAgICAgICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcclxuICAgICAgICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcclxuICAgICAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcclxuICAgICAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXN5bmMpIHtcclxuICAgICAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG5cclxufVxyXG5cclxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcclxuICAgIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XHJcbiAgICBmdW5jdGlvbiBmYWlsKGUpIHtcclxuICAgICAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XHJcbiAgICAgICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHZhciByLCBzID0gMDtcclxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgICAgd2hpbGUgKHIgPSBlbnYuc3RhY2sucG9wKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmICghci5hc3luYyAmJiBzID09PSAxKSByZXR1cm4gcyA9IDAsIGVudi5zdGFjay5wdXNoKHIpLCBQcm9taXNlLnJlc29sdmUoKS50aGVuKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIuZGlzcG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByLmRpc3Bvc2UuY2FsbChyLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoci5hc3luYykgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBzIHw9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGZhaWwoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHMgPT09IDEpIHJldHVybiBlbnYuaGFzRXJyb3IgPyBQcm9taXNlLnJlamVjdChlbnYuZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmV3cml0ZVJlbGF0aXZlSW1wb3J0RXh0ZW5zaW9uKHBhdGgsIHByZXNlcnZlSnN4KSB7XHJcbiAgICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgJiYgL15cXC5cXC4/XFwvLy50ZXN0KHBhdGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzeCA/IHByZXNlcnZlSnN4ID8gXCIuanN4XCIgOiBcIi5qc1wiIDogZCAmJiAoIWV4dCB8fCAhY20pID8gbSA6IChkICsgZXh0ICsgXCIuXCIgKyBjbS50b0xvd2VyQ2FzZSgpICsgXCJqc1wiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXRoO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBfX2V4dGVuZHM6IF9fZXh0ZW5kcyxcclxuICAgIF9fYXNzaWduOiBfX2Fzc2lnbixcclxuICAgIF9fcmVzdDogX19yZXN0LFxyXG4gICAgX19kZWNvcmF0ZTogX19kZWNvcmF0ZSxcclxuICAgIF9fcGFyYW06IF9fcGFyYW0sXHJcbiAgICBfX2VzRGVjb3JhdGU6IF9fZXNEZWNvcmF0ZSxcclxuICAgIF9fcnVuSW5pdGlhbGl6ZXJzOiBfX3J1bkluaXRpYWxpemVycyxcclxuICAgIF9fcHJvcEtleTogX19wcm9wS2V5LFxyXG4gICAgX19zZXRGdW5jdGlvbk5hbWU6IF9fc2V0RnVuY3Rpb25OYW1lLFxyXG4gICAgX19tZXRhZGF0YTogX19tZXRhZGF0YSxcclxuICAgIF9fYXdhaXRlcjogX19hd2FpdGVyLFxyXG4gICAgX19nZW5lcmF0b3I6IF9fZ2VuZXJhdG9yLFxyXG4gICAgX19jcmVhdGVCaW5kaW5nOiBfX2NyZWF0ZUJpbmRpbmcsXHJcbiAgICBfX2V4cG9ydFN0YXI6IF9fZXhwb3J0U3RhcixcclxuICAgIF9fdmFsdWVzOiBfX3ZhbHVlcyxcclxuICAgIF9fcmVhZDogX19yZWFkLFxyXG4gICAgX19zcHJlYWQ6IF9fc3ByZWFkLFxyXG4gICAgX19zcHJlYWRBcnJheXM6IF9fc3ByZWFkQXJyYXlzLFxyXG4gICAgX19zcHJlYWRBcnJheTogX19zcHJlYWRBcnJheSxcclxuICAgIF9fYXdhaXQ6IF9fYXdhaXQsXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yOiBfX2FzeW5jR2VuZXJhdG9yLFxyXG4gICAgX19hc3luY0RlbGVnYXRvcjogX19hc3luY0RlbGVnYXRvcixcclxuICAgIF9fYXN5bmNWYWx1ZXM6IF9fYXN5bmNWYWx1ZXMsXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdDogX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgICBfX2ltcG9ydFN0YXI6IF9faW1wb3J0U3RhcixcclxuICAgIF9faW1wb3J0RGVmYXVsdDogX19pbXBvcnREZWZhdWx0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQ6IF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW46IF9fY2xhc3NQcml2YXRlRmllbGRJbixcclxuICAgIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlOiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcclxuICAgIF9fZGlzcG9zZVJlc291cmNlczogX19kaXNwb3NlUmVzb3VyY2VzLFxyXG4gICAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb246IF9fcmV3cml0ZVJlbGF0aXZlSW1wb3J0RXh0ZW5zaW9uLFxyXG59O1xyXG4iLCIvKiBcdFxyXG4gIFByaXZhY3kgR2xhc3NlcyBwbHVnaW4gZm9yIE9ic2lkaWFuXHJcbiAgQ29weXJpZ2h0IDIwMjEgSmlsbCBBbGJlcnRzXHJcbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKSBcclxuKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgYWRkSWNvbixcclxuICBBcHAsXHJcbiAgTWFya2Rvd25GaWxlSW5mbyxcclxuICBOb3RpY2UsXHJcbiAgUGx1Z2luLFxyXG4gIFBsdWdpblNldHRpbmdUYWIsXHJcbiAgU2V0dGluZyxcclxuICBWaWV3LFxyXG4gIFdvcmtzcGFjZUxlYWYsXHJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5mdW5jdGlvbiBpc01hcmtkb3duRmlsZUluZm9WaWV3KHg6IHVua25vd24pOiB4IGlzIE1hcmtkb3duRmlsZUluZm8ge1xyXG4gIGNvbnN0IGFueVggPSB4IGFzIGFueTtcclxuICByZXR1cm4gISFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFueVgsIFwiZmlsZVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNIb29rZWQodmlldzogVmlldykge1xyXG4gIGNvbnN0IGFueVZpZXcgPSB2aWV3IGFzIGFueTtcclxuICBjb25zdCBvd25Qcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFueVZpZXcpO1xyXG4gIHJldHVybiAoXHJcbiAgICBvd25Qcm9wcy5jb250YWlucyhcInNldFN0YXRlXCIpICYmIHR5cGVvZiBhbnlWaWV3LnNldFN0YXRlID09PSBcImZ1bmN0aW9uXCJcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBob29rVmlld1N0YXRlQ2hhbmdlZChcclxuICB2aWV3OiBWaWV3LFxyXG4gIG9uQmVmb3JlU3RhdGVDaGFuZ2U6ICh2aWV3OiBWaWV3KSA9PiB2b2lkLFxyXG4gIG9uQWZ0ZXJTdGF0ZUNoYW5nZTogKHZpZXc6IFZpZXcpID0+IHZvaWRcclxuKSB7XHJcbiAgY29uc3QgYW55VmlldyA9IHZpZXcgYXMgYW55O1xyXG5cclxuICBjb25zdCBvcmlnaW5hbCA9IGFueVZpZXcuX19wcm90b19fLnNldFN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xyXG4gICAgb25CZWZvcmVTdGF0ZUNoYW5nZSh2aWV3KTtcclxuICAgIGNvbnN0IHIgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgaWYgKHR5cGVvZiByLnRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICByLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIG9uQWZ0ZXJTdGF0ZUNoYW5nZSh2aWV3KTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvbkFmdGVyU3RhdGVDaGFuZ2Uodmlldyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIGFueVZpZXcuc2V0U3RhdGUgPSB3cmFwcGVyLmJpbmQodmlldyk7XHJcblxyXG4gIHJldHVybiBhbnlWaWV3O1xyXG59XHJcblxyXG4vKipcclxuICogQ29uc3RhbnRzXHJcbiAqL1xyXG5cclxuZW51bSBMZXZlbCB7XHJcbiAgSGlkZUFsbCA9IFwiaGlkZS1hbGxcIixcclxuICBIaWRlUHJpdmF0ZSA9IFwiaGlkZS1wcml2YXRlXCIsXHJcbiAgUmV2ZWFsQWxsID0gXCJyZXZlYWwtYWxsXCIsXHJcbiAgUmV2ZWFsSGVhZGxpbmVzID0gXCJyZXZlYWwtaGVhZGxpbmVzXCJcclxufVxyXG5cclxuZW51bSBDc3NDbGFzcyB7XHJcbiAgQmx1ckFsbCA9IFwicHJpdmFjeS1nbGFzc2VzLWJsdXItYWxsXCIsXHJcbiAgUmV2ZWFsT25Ib3ZlciA9IFwicHJpdmFjeS1nbGFzc2VzLXJldmVhbC1vbi1ob3ZlclwiLFxyXG4gIFJldmVhbEFsbCA9IFwicHJpdmFjeS1nbGFzc2VzLXJldmVhbC1hbGxcIixcclxuICBSZXZlYWxVbmRlckNhcmV0ID0gXCJwcml2YWN5LWdsYXNzZXMtcmV2ZWFsLXVuZGVyLWNhcmV0XCIsXHJcbiAgUmV2ZWFsSGVhZGxpbmVzID0gXCJwcml2YWN5LWdsYXNzZXMtcmV2ZWFsLWhlYWRsaW5lc1wiLFxyXG4gIFJldmVhbCA9IFwicHJpdmFjeS1nbGFzc2VzLXJldmVhbFwiLFxyXG4gIElzTWRWaWV3ID0gXCJpcy1tZC12aWV3XCIsXHJcbiAgSXNOb25NZFZpZXcgPSBcImlzLW5vbi1tZC12aWV3XCIsXHJcbiAgSXNNZFZpZXdIZWFkbGluZXNPbmx5ID0gXCJpcy1tZC12aWV3LWhlYWRsaW5lcy1vbmx5XCIsXHJcbiAgUHJpdmFjeUdsYXNzZXNSZXZlYWwgPSBcInByaXZhY3ktZ2xhc3Nlcy1yZXZlYWxcIlxyXG59XHJcblxyXG4vKipcclxuICogTWFpblxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaXZhY3lHbGFzc2VzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICBzZXR0aW5nczogUHJpdmFjeUdsYXNzZXNTZXR0aW5ncztcclxuICBzdGF0dXNCYXI6IEhUTUxFbGVtZW50O1xyXG4gIG5vdGljZU1zZzogTm90aWNlO1xyXG4gIGJsdXJMZXZlbFN0eWxlRWw6IEhUTUxFbGVtZW50O1xyXG4gIHByaXZhdGVEaXJzU3R5bGVFbDogSFRNTEVsZW1lbnQ7XHJcbiAgbGFzdEV2ZW50VGltZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gIGN1cnJlbnRMZXZlbDogTGV2ZWw7XHJcbiAgcmV2ZWFsZWQ6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgdGhpcy5zdGF0dXNCYXIgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgcHJpdmFjeUdsYXNzZXNTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG4gICAgYWRkSWNvbihcImV5ZVwiLCBleWVJY29uKTtcclxuICAgIGFkZEljb24oXCJleWUtY2xvc2VkXCIsIGV5ZUNsb3NlZEljb24pO1xyXG4gICAgYWRkSWNvbihcImV5ZS1zbGFzaFwiLCBleWVTbGFzaEljb24pO1xyXG4gICAgYWRkSWNvbihcImV5ZS1nbGFzc2VzXCIsIGV5ZUdsYXNzZXMpO1xyXG5cclxuICAgIHRoaXMuYWRkUmliYm9uSWNvbihcImV5ZS1jbG9zZWRcIiwgXCJIaWRlIGFsbFwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExldmVsID0gTGV2ZWwuSGlkZUFsbDtcclxuICAgICAgdGhpcy51cGRhdGVMZWF2ZXNBbmRHbG9iYWxSZXZlYWxzKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuYWRkUmliYm9uSWNvbihcImV5ZS1zbGFzaFwiLCBcIlJldmVhbCBub24tcHJpdmF0ZVwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExldmVsID0gTGV2ZWwuSGlkZVByaXZhdGU7XHJcbiAgICAgIHRoaXMudXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJleWUtZ2xhc3Nlc1wiLCBcIlJldmVhbCBoZWFkbGluZXMgb25seVwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExldmVsID0gTGV2ZWwuUmV2ZWFsSGVhZGxpbmVzO1xyXG4gICAgICB0aGlzLnVwZGF0ZUxlYXZlc0FuZEdsb2JhbFJldmVhbHMoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5hZGRSaWJib25JY29uKFwiZXllXCIsIFwiUmV2ZWFsIGFsbFwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExldmVsID0gTGV2ZWwuUmV2ZWFsQWxsO1xyXG4gICAgICB0aGlzLnVwZGF0ZUxlYXZlc0FuZEdsb2JhbFJldmVhbHMoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcInByaXZhY3ktZ2xhc3Nlcy1oaWRlLWFsbFwiLFxyXG4gICAgICBuYW1lOiBcIlByaXZhY3kgR2xhc3NlcyAtIGhpZGUgYWxsXCIsXHJcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBMZXZlbC5IaWRlQWxsO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6IFwicHJpdmFjeS1nbGFzc2VzLWhpZGUtcHJpdmF0ZVwiLFxyXG4gICAgICBuYW1lOiBcIlByaXZhY3kgR2xhc3NlcyAtIGhpZGUgZmlsZXMgaW4gZm9sZGVycyBtYXJrZWQgYXMgcHJpdmF0ZVwiLFxyXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY3VycmVudExldmVsID0gTGV2ZWwuSGlkZVByaXZhdGU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMZWF2ZXNBbmRHbG9iYWxSZXZlYWxzKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogXCJwcml2YWN5LWdsYXNzZXMtcmV2ZWFsLWhlYWRsaW5lc1wiLFxyXG4gICAgICBuYW1lOiBcIlByaXZhY3kgR2xhc3NlcyAtIHJldmVhbCBoZWFkbGluZXMgb25seSwga2VlcGluZyBib2R5IGNvbnRlbnQgaGlkZGVuXCIsXHJcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBMZXZlbC5SZXZlYWxIZWFkbGluZXM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMZWF2ZXNBbmRHbG9iYWxSZXZlYWxzKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogXCJwcml2YWN5LWdsYXNzZXMtcmV2ZWFsLWFsbFwiLFxyXG4gICAgICBuYW1lOiBcIlByaXZhY3kgR2xhc3NlcyAtIGRvIG5vdCBoaWRlIGFueXRoaW5nXCIsXHJcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBMZXZlbC5SZXZlYWxBbGw7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMZWF2ZXNBbmRHbG9iYWxSZXZlYWxzKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVySW50ZXJ2YWwoXHJcbiAgICAgIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jaGVja0lkbGVUaW1lb3V0KCk7XHJcbiAgICAgIH0sIDEwMDApXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KCgpID0+IHtcclxuICAgICAgdGhpcy5yZWdpc3RlckRvbUFjdGl2aXR5RXZlbnRzKHRoaXMuYXBwLndvcmtzcGFjZS5yb290U3BsaXQud2luKTtcclxuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSB0aGlzLnNldHRpbmdzLmJsdXJPblN0YXJ0dXA7XHJcbiAgICAgIHRoaXMudXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVByaXZhdGVEaXJzRWwodGhpcy5hcHAud29ya3NwYWNlLnJvb3RTcGxpdC53aW4uZG9jdW1lbnQpO1xyXG4gICAgICB0aGlzLmVuc3VyZUxlYXZlc0hvb2tlZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJ3aW5kb3ctb3BlblwiLCAod2luKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckRvbUFjdGl2aXR5RXZlbnRzKHdpbi53aW4pO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImFjdGl2ZS1sZWFmLWNoYW5nZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlTGVhdmVzSG9va2VkKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMZWFmVmlld1N0eWxlKGUudmlldyk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMubGFzdEV2ZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gIH1cclxuXHJcbiAgLy8gd2UgaG9vayBpbnRvIHNldFN0YXRlIGZ1bmN0aW9uIG9mIHRoZSB2aWV3LCBiZWNhdXNlIGl0IGlzIHN5bmNocm9ub3VzbHkgY2FsbGVkXHJcbiAgLy8gYmVmb3JlIHRoZSBjb250ZW50IHN3aXRjaC4gdGhpcyBpcyB0byBwcmV2ZW50IHByaXZhdGUgY29udGVudCBmcm9tIGJlaW5nIGFjY2lkZW50YWxseSBicmllZmx5IHJldmVhbGVkXHJcbiAgb25CZWZvcmVWaWV3U3RhdGVDaGFuZ2UobDogV29ya3NwYWNlTGVhZikge1xyXG4gICAgdGhpcy5yZXZlYWxlZC5mb3JFYWNoKChyKSA9PiB7XHJcbiAgICAgIHIucmVtb3ZlQ2xhc3MoQ3NzQ2xhc3MuUmV2ZWFsKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25BZnRlclZpZXdTdGF0ZUNoYW5nZShsOiBXb3Jrc3BhY2VMZWFmKSB7XHJcbiAgICAvLyBzb21lIHBhbmVscyB1cGRhdGUgdXNpbmcgdGhlIHNhbWUgZXZlbnQsIHNvIGl0IGlzIGltcG9ydGFudCB0byB1cGRhdGUgbGVhdmVzIGFmdGVyIHRoZXkgYXJlIHJlYWR5XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVMZWF2ZXNTdHlsZSgpO1xyXG4gICAgfSwgMjAwKTtcclxuICAgIHRoaXMuZW5zdXJlTGVhdmVzSG9va2VkKCk7XHJcbiAgfVxyXG5cclxuICBlbnN1cmVMZWF2ZXNIb29rZWQoKSB7XHJcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUFsbExlYXZlcygoZSkgPT4ge1xyXG4gICAgICBpZiAoaXNIb29rZWQoZS52aWV3KSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaG9va1ZpZXdTdGF0ZUNoYW5nZWQoXHJcbiAgICAgICAgZS52aWV3LFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRoaXMub25CZWZvcmVWaWV3U3RhdGVDaGFuZ2UoZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9uQWZ0ZXJWaWV3U3RhdGVDaGFuZ2UoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZWdpc3RlckRvbUFjdGl2aXR5RXZlbnRzKHdpbjogV2luZG93KSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQod2luLCBcIm1vdXNlZG93blwiLCAoZSkgPT4ge1xyXG4gICAgICB0aGlzLmxhc3RFdmVudFRpbWUgPSBlLnRpbWVTdGFtcDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5yZWdpc3RlckRvbUV2ZW50KHdpbiwgXCJrZXlkb3duXCIsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMubGFzdEV2ZW50VGltZSA9IGUudGltZVN0YW1wO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmFkZEJsdXJMZXZlbEVsKHdpbi5kb2N1bWVudCk7XHJcbiAgfVxyXG5cclxuICBjaGVja0lkbGVUaW1lb3V0KCkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuYmx1ck9uSWRsZVRpbWVvdXRTZWNvbmRzIDwgMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY3VycmVudExldmVsID09PSBMZXZlbC5IaWRlQWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMubGFzdEV2ZW50VGltZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAobm93IC0gdGhpcy5sYXN0RXZlbnRUaW1lKSAvIDEwMDAgPj1cclxuICAgICAgdGhpcy5zZXR0aW5ncy5ibHVyT25JZGxlVGltZW91dFNlY29uZHNcclxuICAgICkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IExldmVsLkhpZGVBbGw7XHJcbiAgICAgIHRoaXMudXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgb251bmxvYWQoKSB7XHJcbiAgICB0aGlzLnN0YXR1c0Jhci5yZW1vdmUoKTtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICB9XHJcblxyXG4gIHNob3VsZFJldmVhbExlYWYodmlldzogVmlldykge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudExldmVsID09PSBMZXZlbC5SZXZlYWxBbGwpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gTGV2ZWwuSGlkZUFsbCB8fFxyXG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gTGV2ZWwuUmV2ZWFsSGVhZGxpbmVzXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNNYXJrZG93bkZpbGVJbmZvVmlldyh2aWV3KSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHZpZXcuZWRpdG9yICYmXHJcbiAgICAgIHRoaXMuc2V0dGluZ3MucHJpdmF0ZU5vdGVNYXJrZXIgJiZcclxuICAgICAgdGhpcy5zZXR0aW5ncy5wcml2YXRlTm90ZU1hcmtlciAhPT0gXCJcIlxyXG4gICAgKSB7XHJcbiAgICAgIGxldCB0YWdzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAvLyBHZXQgdGFncyBpbiB0aGUgbm90ZSBib2R5LCBpZiBhbnlcclxuICAgICAgaWYgKCd0YWdzJyBpbiB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh2aWV3LmZpbGUpKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKC4uLnRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHZpZXcuZmlsZSkudGFncy5maWx0ZXIoeCA9PiAhIXgudGFnKS5tYXAoeCA9PiB4LnRhZykpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEdldCB0YWdzIGluIHByb3BlcnRpZXMsIGlmIGFueVxyXG4gICAgICBsZXQgZnJvbnRtYXR0ZXIgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh2aWV3LmZpbGUpPy5mcm9udG1hdHRlclxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhmcm9udG1hdHRlcilcclxuICAgICAgaWYgKGZyb250bWF0dGVyICYmICd0YWdzJyBpbiBmcm9udG1hdHRlcikgeyAvLyBoZXJlXHJcbiAgICAgICAgdGFncy5wdXNoKC4uLnRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHZpZXcuZmlsZSkuZnJvbnRtYXR0ZXIudGFncy5maWx0ZXIoKHg6IHN0cmluZykgPT4gISF4KSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhZ3MgJiYgdGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgcmV0dXJuICF0YWdzLmluY2x1ZGVzKHRoaXMuc2V0dGluZ3MucHJpdmF0ZU5vdGVNYXJrZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB2aWV3LmZpbGUgJiZcclxuICAgICAgIXRoaXMuc2V0dGluZ3MucHJpdmF0ZURpcnMuY29udGFpbnModmlldy5maWxlLnBhcmVudC5wYXRoKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUxlYWZWaWV3U3R5bGUodmlldzogVmlldykge1xyXG4gICAgY29uc3QgaXNNZCA9IGlzTWFya2Rvd25GaWxlSW5mb1ZpZXcodmlldykgJiYgdmlldy5lZGl0b3I7XHJcbiAgICB2aWV3LmNvbnRhaW5lckVsLnJlbW92ZUNsYXNzKFxyXG4gICAgICBDc3NDbGFzcy5Jc01kVmlldyxcclxuICAgICAgQ3NzQ2xhc3MuSXNOb25NZFZpZXcsXHJcbiAgICAgIENzc0NsYXNzLklzTWRWaWV3SGVhZGxpbmVzT25seSk7XHJcbiAgICBpZiAoaXNNZCAmJiB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gTGV2ZWwuUmV2ZWFsSGVhZGxpbmVzKSB7XHJcbiAgICAgIHZpZXcuY29udGFpbmVyRWwuYWRkQ2xhc3MoQ3NzQ2xhc3MuSXNNZFZpZXdIZWFkbGluZXNPbmx5KTtcclxuICAgIH0gZWxzZSBpZiAoaXNNZCkge1xyXG4gICAgICB2aWV3LmNvbnRhaW5lckVsLmFkZENsYXNzKENzc0NsYXNzLklzTWRWaWV3KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZpZXcuY29udGFpbmVyRWwuYWRkQ2xhc3MoQ3NzQ2xhc3MuSXNOb25NZFZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNob3VsZFJldmVhbCA9IHRoaXMuc2hvdWxkUmV2ZWFsTGVhZih2aWV3KTtcclxuICAgIGlmIChzaG91bGRSZXZlYWwpIHtcclxuICAgICAgdmlldy5jb250YWluZXJFbC5hZGRDbGFzcyhDc3NDbGFzcy5Qcml2YWN5R2xhc3Nlc1JldmVhbCk7XHJcbiAgICAgIHRoaXMucmV2ZWFsZWQucHVzaCh2aWV3LmNvbnRhaW5lckVsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZpZXcuY29udGFpbmVyRWwucmVtb3ZlQ2xhc3MoQ3NzQ2xhc3MuUHJpdmFjeUdsYXNzZXNSZXZlYWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpIHtcclxuICAgIHRoaXMudXBkYXRlTGVhdmVzU3R5bGUoKTtcclxuICAgIHRoaXMudXBkYXRlR2xvYmFsUmV2ZWFsU3R5bGUoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUxlYXZlc1N0eWxlKCkge1xyXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGUpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVMZWFmVmlld1N0eWxlKGUudmlldyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUdsb2JhbFJldmVhbFN0eWxlKCkge1xyXG4gICAgdGhpcy5yZW1vdmVBbGxDbGFzc2VzKCk7XHJcbiAgICB0aGlzLnNldENsYXNzVG9Eb2N1bWVudEJvZHkodGhpcy5jdXJyZW50TGV2ZWwpO1xyXG5cclxuICAgIGlmICh0aGlzLnNldHRpbmdzLmhvdmVyVG9SZXZlYWwpIHtcclxuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKENzc0NsYXNzLlJldmVhbE9uSG92ZXIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucmV2ZWFsVW5kZXJDYXJldCkge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ3NzQ2xhc3MuUmV2ZWFsVW5kZXJDYXJldCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVBbGxDbGFzc2VzKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDbGFzcyhcclxuICAgICAgQ3NzQ2xhc3MuQmx1ckFsbCxcclxuICAgICAgQ3NzQ2xhc3MuUmV2ZWFsT25Ib3ZlcixcclxuICAgICAgQ3NzQ2xhc3MuUmV2ZWFsQWxsLFxyXG4gICAgICBDc3NDbGFzcy5SZXZlYWxVbmRlckNhcmV0LFxyXG4gICAgICBDc3NDbGFzcy5SZXZlYWxIZWFkbGluZXNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRDbGFzc1RvRG9jdW1lbnRCb2R5KGN1cnJlbnRMZXZlbDogTGV2ZWwpIHtcclxuICAgIHN3aXRjaCAoY3VycmVudExldmVsKSB7XHJcbiAgICAgIGNhc2UgTGV2ZWwuSGlkZUFsbDpcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ3NzQ2xhc3MuQmx1ckFsbCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgTGV2ZWwuUmV2ZWFsQWxsOlxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChDc3NDbGFzcy5SZXZlYWxBbGwpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIExldmVsLlJldmVhbEhlYWRsaW5lczpcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ3NzQ2xhc3MuUmV2ZWFsSGVhZGxpbmVzKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEJsdXJMZXZlbEVsKGRvYzogRG9jdW1lbnQpIHtcclxuICAgIHRoaXMuYmx1ckxldmVsU3R5bGVFbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICB0aGlzLmJsdXJMZXZlbFN0eWxlRWwuaWQgPSBcInByaXZhY3lHbGFzc2VzQmx1ckxldmVsXCI7XHJcbiAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLmJsdXJMZXZlbFN0eWxlRWwpO1xyXG4gICAgdGhpcy51cGRhdGVCbHVyTGV2ZWxFbCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQmx1ckxldmVsRWwoKSB7XHJcbiAgICBpZiAoIXRoaXMuYmx1ckxldmVsU3R5bGVFbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmJsdXJMZXZlbFN0eWxlRWwudGV4dENvbnRlbnQgPSBgYm9keSB7LS1ibHVyTGV2ZWw6JHt0aGlzLnNldHRpbmdzLmJsdXJMZXZlbH1lbX07YDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVByaXZhdGVEaXJzRWwoZG9jPzogRG9jdW1lbnQpIHtcclxuICAgIGlmIChkb2MgJiYgIXRoaXMucHJpdmF0ZURpcnNTdHlsZUVsKSB7XHJcbiAgICAgIHRoaXMucHJpdmF0ZURpcnNTdHlsZUVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuICAgICAgdGhpcy5wcml2YXRlRGlyc1N0eWxlRWwuaWQgPSBcInByaXZhY3lHbGFzc2VzRGlyQmx1clwiO1xyXG4gICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnByaXZhdGVEaXJzU3R5bGVFbCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkaXJzID0gdGhpcy5zZXR0aW5ncy5wcml2YXRlRGlycy5zcGxpdChcIixcIik7XHJcbiAgICB0aGlzLnByaXZhdGVEaXJzU3R5bGVFbC50ZXh0Q29udGVudCA9IGRpcnNcclxuICAgICAgLm1hcChcclxuICAgICAgICAoZCkgPT5cclxuICAgICAgICAgIGBcclxuXHJcbiAgICAgICAgICA6aXMoLm5hdi1mb2xkZXItdGl0bGUsIC5uYXYtZmlsZS10aXRsZSlbZGF0YS1wYXRoXj0ke2R9XSB7ZmlsdGVyOiBibHVyKGNhbGModmFyKC0tYmx1ckxldmVsKSAqIDEpKX1cclxuXHJcbiAgICAgICAgICA6aXMoLm5hdi1mb2xkZXItdGl0bGUsIC5uYXYtZmlsZS10aXRsZSlbZGF0YS1wYXRoXj0ke2R9XTpob3ZlciB7ZmlsdGVyOiB1bnNldH1cclxuXHJcbiAgICAgICAgICAucHJpdmFjeS1nbGFzc2VzLXJldmVhbC1hbGwgOmlzKC5uYXYtZm9sZGVyLXRpdGxlLCAubmF2LWZpbGUtdGl0bGUpW2RhdGEtcGF0aF49JHtkfV0ge2ZpbHRlcjogdW5zZXR9XHJcblxyXG5cclxuICAgICAgICAgIGBcclxuICAgICAgKVxyXG4gICAgICAuam9pbihcIlwiKTtcclxuICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBQcml2YWN5R2xhc3Nlc1NldHRpbmdzIHtcclxuICBibHVyT25TdGFydHVwOiBMZXZlbDtcclxuICBibHVyTGV2ZWw6IG51bWJlcjtcclxuICBibHVyT25JZGxlVGltZW91dFNlY29uZHM6IG51bWJlcjtcclxuICBob3ZlclRvUmV2ZWFsOiBib29sZWFuO1xyXG4gIHJldmVhbFVuZGVyQ2FyZXQ6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZURpcnM6IHN0cmluZztcclxuICBwcml2YXRlTm90ZU1hcmtlcjogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQcml2YWN5R2xhc3Nlc1NldHRpbmdzID0ge1xyXG4gIGJsdXJPblN0YXJ0dXA6IExldmVsLkhpZGVQcml2YXRlLFxyXG4gIGJsdXJMZXZlbDogMC4zLFxyXG4gIGJsdXJPbklkbGVUaW1lb3V0U2Vjb25kczogLTEsXHJcbiAgaG92ZXJUb1JldmVhbDogdHJ1ZSxcclxuICByZXZlYWxVbmRlckNhcmV0OiBmYWxzZSxcclxuICBwcml2YXRlRGlyczogXCJcIixcclxuICBwcml2YXRlTm90ZU1hcmtlcjogXCIjcHJpdmF0ZVwiLFxyXG59O1xyXG5cclxuY2xhc3MgcHJpdmFjeUdsYXNzZXNTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgcGx1Z2luOiBQcml2YWN5R2xhc3Nlc1BsdWdpbjtcclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQcml2YWN5R2xhc3Nlc1BsdWdpbikge1xyXG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgfVxyXG5cclxuICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwge1xyXG4gICAgICB0ZXh0OiBcIlByaXZhY3kgR2xhc3NlcyB2XCIgKyB0aGlzLnBsdWdpbi5tYW5pZmVzdC52ZXJzaW9uLFxyXG4gICAgfSk7XHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImFcIiwge1xyXG4gICAgICB0ZXh0OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9qaWxsYWxiZXJ0cy9wcml2YWN5LWdsYXNzZXNcIixcclxuICAgICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vamlsbGFsYmVydHMvcHJpdmFjeS1nbGFzc2VzXCIsXHJcbiAgICB9KTtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3BhblwiLCB7XHJcbiAgICAgIHRleHQ6IFwiOiBkb2N1bWVudGF0aW9uLCByZXBvcnQgaXNzdWVzLCBjb250YWN0IGluZm9cIixcclxuICAgIH0pO1xyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgdGV4dDogJ1RvIGFjdGl2YXRlL2RlYWN0aXZhdGUgUHJpdmFjeSBHbGFzc2VzLCBjbGljayB0aGUgZ2xhc3NlcyBpY29uIG9uIHRoZSBsZWZ0LWhhbmQgcmliYm9uIG9yIHJ1biBcIlByaXZhY3kgR2xhc3Nlc1wiIGNvbW1hbmRzIGluIHRoZSBDb21tYW5kIFBhbGV0dGUgKEN0cmwtUCkuIFRoZSBjb21tYW5kIGNhbiBhbHNvIGJlIGJvdW5kIHRvIGEga2V5Ym9hcmQgc2hvcnRjdXQgaWYgeW91IHdpc2guJyxcclxuICAgIH0pO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkFjdGl2YXRlIFByaXZhY3kgR2xhc3NlcyBvbiBzdGFydHVwXCIpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgIFwiSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBhdXRvbWF0aWNhbGx5IGFjdGl2YXRlZCB3aGVuIHN0YXJ0aW5nIE9ic2lkaWFuLlwiXHJcbiAgICAgIClcclxuICAgICAgLmFkZERyb3Bkb3duKCh0b2dnbGUpID0+IHtcclxuICAgICAgICB0b2dnbGUuYWRkT3B0aW9ucyh7XHJcbiAgICAgICAgICBcImhpZGUtYWxsXCI6IFwiSGlkZSBhbGxcIixcclxuICAgICAgICAgIFwiaGlkZS1wcml2YXRlXCI6IFwiSGlkZSBwcml2YXRlIChkZWZhdWx0KVwiLFxyXG4gICAgICAgICAgXCJyZXZlYWwtYWxsXCI6IFwiUmV2ZWFsIGFsbFwiLFxyXG4gICAgICAgICAgXCJyZXZlYWwtaGVhZGxpbmVzXCI6IFwiUmV2ZWFsIGhlYWRsaW5lcyBvbmx5XCJcclxuICAgICAgICB9KTtcclxuICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYmx1ck9uU3RhcnR1cCk7XHJcbiAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYmx1ck9uU3RhcnR1cCA9IHZhbHVlIGFzIExldmVsO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkhpZGUgYWxsIGFmdGVyIHVzZXIgaW5hY3Rpdml0eSAoc2Vjb25kcylcIilcclxuICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgXCJJbmFjdGl2aXR5IHRpbWUgYWZ0ZXIgd2hpY2ggUHJpdmFjeSBHbGFzc2VzIHdpbGwgaGlkZSBhbGwuIC0xIHRvIGRpc2FibGUgYXV0by1oaWRpbmcuXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dGZpZWxkKSA9PiB7XHJcbiAgICAgICAgdGV4dGZpZWxkLnNldFBsYWNlaG9sZGVyKFwiLTFcIik7XHJcbiAgICAgICAgdGV4dGZpZWxkLmlucHV0RWwudHlwZSA9IFwibnVtYmVyXCI7XHJcbiAgICAgICAgdGV4dGZpZWxkLmlucHV0RWwubWluID0gXCItMVwiO1xyXG4gICAgICAgIHRleHRmaWVsZC5zZXRWYWx1ZShcclxuICAgICAgICAgIFN0cmluZyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibHVyT25JZGxlVGltZW91dFNlY29uZHMpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0ZXh0ZmllbGQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBsZXQgcGFyc2VkID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgICAgICBpZiAoaXNOYU4ocGFyc2VkKSkge1xyXG4gICAgICAgICAgICBwYXJzZWQgPSAtMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmJsdXJPbklkbGVUaW1lb3V0U2Vjb25kcyA9IHBhcnNlZDtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJIb3ZlciB0byByZXZlYWxcIilcclxuICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgXCJJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gcmV2ZWFsIGNvbnRlbnQgd2hlbiBob3ZlcmluZyB0aGUgY3Vyc29yIG92ZXIgaXQuXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaG92ZXJUb1JldmVhbCk7XHJcbiAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaG92ZXJUb1JldmVhbCA9IHZhbHVlO1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlTGVhdmVzQW5kR2xvYmFsUmV2ZWFscygpO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIlJldmVhbCB1bmRlciBjYXJldFwiKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICBcIkluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byByZXZlYWwgY29udGVudCB3aGVuIGNhcmV0IGlzIG9uIGl0LlwiXHJcbiAgICAgIClcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJldmVhbFVuZGVyQ2FyZXQpO1xyXG4gICAgICAgIHRvZ2dsZS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJldmVhbFVuZGVyQ2FyZXQgPSB2YWx1ZTtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnVwZGF0ZUdsb2JhbFJldmVhbFN0eWxlKCk7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdmFyIHNsaWRlckVsID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpO1xyXG4gICAgbGV0IHNsaWRlckVsRGVzYyA9IFwiSGlnaGVyIGlzIGJsdXJyaWVyLiBEZWZhdWx0PTYwLCBjdXJyZW50PVwiO1xyXG4gICAgc2xpZGVyRWxcclxuICAgICAgLnNldE5hbWUoXCJCbHVyIGxldmVsXCIpXHJcbiAgICAgIC5zZXREZXNjKHNsaWRlckVsRGVzYyArIE1hdGgucm91bmQodGhpcy5wbHVnaW4uc2V0dGluZ3MuYmx1ckxldmVsICogMTAwKSlcclxuICAgICAgLy8gXiBuZWVkIHJvdW5kaW5nIHRvIG5vdCBzaG93IHZhbHVlcyBsaWtlICc1NS4wMDAwMDAwMDAwMDAwMSdcclxuICAgICAgLmFkZFNsaWRlcigoc2xpZGVyKSA9PlxyXG4gICAgICAgIHNsaWRlclxyXG4gICAgICAgICAgLnNldExpbWl0cygwLjEsIDEuNSwgMC4wNSlcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibHVyTGV2ZWwpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmJsdXJMZXZlbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICBzbGlkZXJFbC5zZXREZXNjKFxyXG4gICAgICAgICAgICAgIHNsaWRlckVsRGVzYyArIE1hdGgucm91bmQodGhpcy5wbHVnaW4uc2V0dGluZ3MuYmx1ckxldmVsICogMTAwKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi51cGRhdGVCbHVyTGV2ZWxFbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKFwiUHJpdmF0ZSBkaXJlY3Rvcmllc1wiKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICBcIkNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGRpcmVjdG9yaWVzLCBpbiB3aGljaCBmaWxlcyBhcmUgY29uc2lkZXJlZCBwcml2YXRlXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJmaW5hbmNlLHRoZXJhcHlcIilcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcml2YXRlRGlycylcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJpdmF0ZURpcnMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnVwZGF0ZUxlYXZlc0FuZEdsb2JhbFJldmVhbHMoKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlUHJpdmF0ZURpcnNFbCgpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJQcml2YXRlIG5vdGUgbWFya2VyXCIpXHJcbiAgICAgIC5zZXREZXNjKFwiU3RhcnQgYSBub3RlIHdpdGggdGhpcyB0ZXh0IHRvIG1hcmsgbm90ZSBhcyBwcml2YXRlXCIpXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgIHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIiNwcml2YXRlXCIpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJpdmF0ZU5vdGVNYXJrZXIpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnByaXZhdGVOb3RlTWFya2VyID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi51cGRhdGVMZWF2ZXNTdHlsZSgpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGh0dHBzOi8vaWNvbi1zZXRzLmljb25pZnkuZGVzaWduL3BoL2V5ZS1zbGFzaC9cclxuY29uc3QgZXllU2xhc2hJY29uID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgdmlld0JveD1cIjAgMCAyNTYgMjU2XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNTMuOSAzNC42YTggOCAwIDAgMC0xMS44IDEwLjhsMTkuMiAyMS4xQzI1IDg4LjggOS40IDEyMy4yIDguNyAxMjQuOGE4LjIgOC4yIDAgMCAwIDAgNi41Yy4zLjcgOC44IDE5LjUgMjcuNiAzOC40YzI1LjEgMjUgNTYuOCAzOC4zIDkxLjcgMzguM2ExMjguNiAxMjguNiAwIDAgMCA1Mi4xLTEwLjhsMjIgMjQuMmE4IDggMCAwIDAgNS45IDIuNmE4LjIgOC4yIDAgMCAwIDUuNC0yLjFhNy45IDcuOSAwIDAgMCAuNS0xMS4zWm00Ny4zIDc1LjlsNDEuNyA0NS44QTMxLjYgMzEuNiAwIDAgMSAxMjggMTYwYTMyIDMyIDAgMCAxLTI2LjgtNDkuNVpNMTI4IDE5MmMtMzAuOCAwLTU3LjctMTEuMi03OS45LTMzLjNBMTI4LjMgMTI4LjMgMCAwIDEgMjUgMTI4YzQuNy04LjggMTkuOC0zMy41IDQ3LjMtNDkuNGwxOCAxOS44YTQ4IDQ4IDAgMCAwIDYzLjYgNzBsMTQuNyAxNi4yQTExMi4xIDExMi4xIDAgMCAxIDEyOCAxOTJabTExOS4zLTYwLjdjLS40LjktMTAuNSAyMy4zLTMzLjQgNDMuOGE4LjEgOC4xIDAgMCAxLTUuMyAyYTcuNiA3LjYgMCAwIDEtNS45LTIuN2E4IDggMCAwIDEgLjYtMTEuM0ExMzEgMTMxIDAgMCAwIDIzMSAxMjhhMTMwLjMgMTMwLjMgMCAwIDAtMjMuMS0zMC44QzE4NS43IDc1LjIgMTU4LjggNjQgMTI4IDY0YTExMi45IDExMi45IDAgMCAwLTE5LjQgMS42YTguMSA4LjEgMCAwIDEtOS4yLTYuNmE4IDggMCAwIDEgNi42LTkuMmExMzIuNCAxMzIuNCAwIDAgMSAyMi0xLjhjMzQuOSAwIDY2LjYgMTMuMyA5MS43IDM4LjNjMTguOCAxOC45IDI3LjMgMzcuNyAyNy42IDM4LjVhOC4yIDguMiAwIDAgMSAwIDYuNVpNMTM0IDk2LjZhOCA4IDAgMCAxIDMtMTUuOGE0OC4zIDQ4LjMgMCAwIDEgMzguOCA0Mi43YTggOCAwIDAgMS03LjIgOC43aC0uOGE3LjkgNy45IDAgMCAxLTcuOS03LjJBMzIuMiAzMi4yIDAgMCAwIDEzNCA5Ni42WlwiLz48L3N2Zz5gO1xyXG5cclxuLy8gaHR0cHM6Ly9pY29uLXNldHMuaWNvbmlmeS5kZXNpZ24vcGgvZXllLWNsb3NlZC1ib2xkL1xyXG5jb25zdCBleWVDbG9zZWRJY29uID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgdmlld0JveD1cIjAgMCAyNTYgMjU2XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjM0LjQgMTYwLjhhMTIgMTIgMCAwIDEtMTAuNCAxOGExMS44IDExLjggMCAwIDEtMTAuNC02bC0xNi4zLTI4LjJhMTI2IDEyNiAwIDAgMS0yOS40IDEzLjVsNS4yIDI5LjRhMTEuOSAxMS45IDAgMCAxLTkuNyAxMy45bC0yLjEuMmExMiAxMiAwIDAgMS0xMS44LTkuOWwtNS4xLTI4LjdhMTIzLjUgMTIzLjUgMCAwIDEtMTYuNCAxYTE0Ni4zIDE0Ni4zIDAgMCAxLTE2LjUtMWwtNS4xIDI4LjdhMTIgMTIgMCAwIDEtMTEuOCA5LjlsLTIuMS0uMmExMS45IDExLjkgMCAwIDEtOS43LTEzLjlsNS4yLTI5LjRhMTI1LjMgMTI1LjMgMCAwIDEtMjkuMy0xMy41TDQyLjMgMTczYTEyLjEgMTIuMSAwIDAgMS0xMC40IDZhMTEuNyAxMS43IDAgMCAxLTYtMS42YTEyIDEyIDAgMCAxLTQuNC0xNi40bDE3LjktMzFhMTQyLjQgMTQyLjQgMCAwIDEtMTYuNy0xNy42YTEyIDEyIDAgMSAxIDE4LjYtMTUuMUM1Ny4xIDExNi44IDg0LjkgMTQwIDEyOCAxNDBzNzAuOS0yMy4yIDg2LjctNDIuN2ExMiAxMiAwIDEgMSAxOC42IDE1LjFhMTUwLjMgMTUwLjMgMCAwIDEtMTYuNyAxNy43WlwiLz48L3N2Zz5gO1xyXG5cclxuLy8gaHR0cHM6Ly9pY29uLXNldHMuaWNvbmlmeS5kZXNpZ24vcGgvZXllL1xyXG5jb25zdCBleWVJY29uID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgdmlld0JveD1cIjAgMCAyNTYgMjU2XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjQ3LjMgMTI0LjhjLS4zLS44LTguOC0xOS42LTI3LjYtMzguNUMxOTQuNiA2MS4zIDE2Mi45IDQ4IDEyOCA0OFM2MS40IDYxLjMgMzYuMyA4Ni4zQzE3LjUgMTA1LjIgOSAxMjQgOC43IDEyNC44YTcuOSA3LjkgMCAwIDAgMCA2LjRjLjMuOCA4LjggMTkuNiAyNy42IDM4LjVjMjUuMSAyNSA1Ni44IDM4LjMgOTEuNyAzOC4zczY2LjYtMTMuMyA5MS43LTM4LjNjMTguOC0xOC45IDI3LjMtMzcuNyAyNy42LTM4LjVhNy45IDcuOSAwIDAgMCAwLTYuNFpNMTI4IDE5MmMtMzAuOCAwLTU3LjctMTEuMi03OS45LTMzLjNBMTMwLjMgMTMwLjMgMCAwIDEgMjUgMTI4YTEzMC4zIDEzMC4zIDAgMCAxIDIzLjEtMzAuOEM3MC4zIDc1LjIgOTcuMiA2NCAxMjggNjRzNTcuNyAxMS4yIDc5LjkgMzMuMkExMzAuMyAxMzAuMyAwIDAgMSAyMzEgMTI4Yy03LjIgMTMuNS0zOC42IDY0LTEwMyA2NFptMC0xMTJhNDggNDggMCAxIDAgNDggNDhhNDggNDggMCAwIDAtNDgtNDhabTAgODBhMzIgMzIgMCAxIDEgMzItMzJhMzIuMSAzMi4xIDAgMCAxLTMyIDMyWlwiLz48L3N2Zz5gO1xyXG5cclxuLy8gaHR0cHM6Ly9pY29uLXNldHMuaWNvbmlmeS5kZXNpZ24vcGgvZXllZ2xhc3Nlcy9cclxuY29uc3QgZXllR2xhc3NlcyA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHZpZXdCb3g9XCIwIDAgMjU2IDI1NlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTIwMCA0MGE4IDggMCAwIDAgMCAxNmExNiAxNiAwIDAgMSAxNiAxNnY1OC4wOEE0NCA0NCAwIDAgMCAxNDUuNjggMTUyaC0zNS4zNkE0NCA0NCAwIDAgMCA0MCAxMzAuMDhWNzJhMTYgMTYgMCAwIDEgMTYtMTZhOCA4IDAgMCAwIDAtMTZhMzIgMzIgMCAwIDAtMzIgMzJ2OTJhNDQgNDQgMCAwIDAgODcuODEgNGgzMi4zOGE0NCA0NCAwIDAgMCA4Ny44MS00VjcyYTMyIDMyIDAgMCAwLTMyLTMyWk02OCAxOTJhMjggMjggMCAxIDEgMjgtMjhhMjggMjggMCAwIDEtMjggMjhabTEyMCAwYTI4IDI4IDAgMSAxIDI4LTI4YTI4IDI4IDAgMCAxLTI4IDI4WlwiLz48L3N2Zz5gOyJdLCJuYW1lcyI6WyJQbHVnaW4iLCJhZGRJY29uIiwiUGx1Z2luU2V0dGluZ1RhYiIsIlNldHRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvR0E7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFD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
